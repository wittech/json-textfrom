{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JSON Shcema Flutter This is the plugin for flutter using JSON Schema to define the form itself. It supports: Textfield Selection field Forignkey field Qrcode scanning DateTime Field Custom field icon and action Basic usage JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList() ) Pre-defined value use your schema's name field as key, and then put values. And then it will use the pre-defined value as value in your schema value instead of blank value. JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), values: { \"author_id\": {\"label\": \"some label\", \"value\": 2}, \"name\": \"abc\", \"time\": DateTime(2016, 1, 2, 1).toIso8601String(), }, ) Add icons if you want to add leading icon for each field, you can customize the icons field. For example, suppose you have schema like { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } and you want to add icon for this field, then you can define the schema like this JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), icons: [ FieldIcon(schemaName: \"name\", iconData: Icons.title), ] ) schemaName is the same as the field \"name\" in your json schema. Add actions To add actions for your form, define actions field. For example, your schema looks like this: { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } Then you can define your schema like this JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), actions: [ FieldAction<File>( schemaName: \"name\", actionTypes: ActionTypes.image, actionDone: ActionDone.getImage, onDone: (File file) async { if (file is File) { print(file); } return file; }), ] ) This will take a image by using your device's camera and then return the image. Currently support following action types: image qrcode And action done actions: getInput getImage image qrcode getInput use your custom onDone function to get value get qr code value getImage return image value also, you can define your own custom onDone function to do the image classification. For example, following code will return \"abc\" after the image was taken. FieldAction<File>( schemaName: \"name\", schemaFor: \"category_id\", actionTypes: ActionTypes.image, actionDone: ActionDone.getInput, onDone: (File file) async { if (file is File) { print(file); } return \"abc\"; }) More information about actions, please refer the docs on forignKey Retriving data Use onSubmit Function if you want to get the data after user click on onSubmit button, then you can use onSubmit field to get data. This function will be called after user click on the submit button. JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), onSubmit: (value) async { print(value); }, ) Use controller However, if you want to have you own submit button and get the value from the schema, you can use controller. First, define the controller JSONSchemaController controller = JSONSchemaController(); Then, use the controller JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), ) Finally, use the controller. var value = await this.controller.onSubmit(context);","title":"Home"},{"location":"#welcome-to-json-shcema-flutter","text":"This is the plugin for flutter using JSON Schema to define the form itself. It supports: Textfield Selection field Forignkey field Qrcode scanning DateTime Field Custom field icon and action","title":"Welcome to JSON Shcema Flutter"},{"location":"#basic-usage","text":"JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList() )","title":"Basic usage"},{"location":"#pre-defined-value","text":"use your schema's name field as key, and then put values. And then it will use the pre-defined value as value in your schema value instead of blank value. JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), values: { \"author_id\": {\"label\": \"some label\", \"value\": 2}, \"name\": \"abc\", \"time\": DateTime(2016, 1, 2, 1).toIso8601String(), }, )","title":"Pre-defined value"},{"location":"#add-icons","text":"if you want to add leading icon for each field, you can customize the icons field. For example, suppose you have schema like { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } and you want to add icon for this field, then you can define the schema like this JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), icons: [ FieldIcon(schemaName: \"name\", iconData: Icons.title), ] ) schemaName is the same as the field \"name\" in your json schema.","title":"Add icons"},{"location":"#add-actions","text":"To add actions for your form, define actions field. For example, your schema looks like this: { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } Then you can define your schema like this JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), actions: [ FieldAction<File>( schemaName: \"name\", actionTypes: ActionTypes.image, actionDone: ActionDone.getImage, onDone: (File file) async { if (file is File) { print(file); } return file; }), ] ) This will take a image by using your device's camera and then return the image. Currently support following action types: image qrcode And action done actions: getInput getImage image qrcode getInput use your custom onDone function to get value get qr code value getImage return image value also, you can define your own custom onDone function to do the image classification. For example, following code will return \"abc\" after the image was taken. FieldAction<File>( schemaName: \"name\", schemaFor: \"category_id\", actionTypes: ActionTypes.image, actionDone: ActionDone.getInput, onDone: (File file) async { if (file is File) { print(file); } return \"abc\"; }) More information about actions, please refer the docs on forignKey","title":"Add actions"},{"location":"#retriving-data","text":"","title":"Retriving data"},{"location":"#use-onsubmit-function","text":"if you want to get the data after user click on onSubmit button, then you can use onSubmit field to get data. This function will be called after user click on the submit button. JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), onSubmit: (value) async { print(value); }, )","title":"Use onSubmit Function"},{"location":"#use-controller","text":"However, if you want to have you own submit button and get the value from the schema, you can use controller. First, define the controller JSONSchemaController controller = JSONSchemaController(); Then, use the controller JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), ) Finally, use the controller. var value = await this.controller.onSubmit(context);","title":"Use controller"},{"location":"examples/","text":"Example projects are inside the example/ folder","title":"Examples"},{"location":"forignkey/","text":"Forign Key Basic usage if you have a schema like this { \"label\": \"category\", \"readonly\": true, \"extra\": { \"related_model\": \"storage-management/category\" }, \"name\": \"category_name\", \"widget\": \"foreignkey\", \"required\": false, \"translated\": false, \"validations\": {} } and dart code like this: JSONSchemaForm( schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), url: \"http://192.168.1.114:8000\", ); then, JSONSchemaForm will automatically go to http://192.168.1.114:8000/ storage_management/category by using option request to fetch the schema for category. important notes: The forignkey field is based on the implementation on django's schema,which will replace storage-management/category to storage_management/category . Pre-defined value suppose you have schema above where your forignkey has name category_name . To set pre-define value for the forignkey, use following syntax. schema's name as key, and value is a map where it has two field, one is label and another is value. label: a text represents the selected field's name which used to display on the main screen. value: a field represents the actual selected value which used to display on the forignkey selection page. For example, if you have label as \"hello\", and value is 2. When you on the main screen (before click on select button), it will display \"Select category hello\". And after you get into the detail page, it will mark radio button hello which has value 2 selected. JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), values: { \"category_name\": {\"label\": \"some label\", \"value\": 2}, }, ) Actions and icons To use actions and icons for forignkey field (The field displayed after get into the detail page), you need to set schemaFor field. If you want to set the actions/icons for every field with same name, you can set useGlobally to true. For example, you have you home schema like this [ { \"label\": \"category\", \"readonly\": false, \"extra\": { \"related_model\": \"storage-management/category\" }, \"name\": \"category_id\", \"widget\": \"foreignkey\", \"required\": false, \"translated\": false, \"validations\": {} }, { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } ] And the schema for you category has the following schema [ { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } ] you can define an action for the Item name field (which is inside the category) like this. Note that schemaFor's value is the same as the name field's value in your main schema. FieldAction<File>( schemaName: \"name\", schemaFor: \"category_id\", actionTypes: ActionTypes.image, actionDone: ActionDone.getInput, onDone: (File file) async { } )","title":"ForignKey"},{"location":"forignkey/#forign-key","text":"","title":"Forign Key"},{"location":"forignkey/#basic-usage","text":"if you have a schema like this { \"label\": \"category\", \"readonly\": true, \"extra\": { \"related_model\": \"storage-management/category\" }, \"name\": \"category_name\", \"widget\": \"foreignkey\", \"required\": false, \"translated\": false, \"validations\": {} } and dart code like this: JSONSchemaForm( schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), url: \"http://192.168.1.114:8000\", ); then, JSONSchemaForm will automatically go to http://192.168.1.114:8000/ storage_management/category by using option request to fetch the schema for category. important notes: The forignkey field is based on the implementation on django's schema,which will replace storage-management/category to storage_management/category .","title":"Basic usage"},{"location":"forignkey/#pre-defined-value","text":"suppose you have schema above where your forignkey has name category_name . To set pre-define value for the forignkey, use following syntax. schema's name as key, and value is a map where it has two field, one is label and another is value. label: a text represents the selected field's name which used to display on the main screen. value: a field represents the actual selected value which used to display on the forignkey selection page. For example, if you have label as \"hello\", and value is 2. When you on the main screen (before click on select button), it will display \"Select category hello\". And after you get into the detail page, it will mark radio button hello which has value 2 selected. JSONSchemaForm( rounded: true, controller: controller, schema: (snapshot.data['fields'] as List) .map((s) => s as Map<String, dynamic>) .toList(), values: { \"category_name\": {\"label\": \"some label\", \"value\": 2}, }, )","title":"Pre-defined value"},{"location":"forignkey/#actions-and-icons","text":"To use actions and icons for forignkey field (The field displayed after get into the detail page), you need to set schemaFor field. If you want to set the actions/icons for every field with same name, you can set useGlobally to true. For example, you have you home schema like this [ { \"label\": \"category\", \"readonly\": false, \"extra\": { \"related_model\": \"storage-management/category\" }, \"name\": \"category_id\", \"widget\": \"foreignkey\", \"required\": false, \"translated\": false, \"validations\": {} }, { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } ] And the schema for you category has the following schema [ { \"label\": \"Item Name\", \"readonly\": false, \"extra\": { \"help\": \"Please Enter your item name\", \"default\": \"\" }, \"name\": \"name\", \"widget\": \"text\", \"required\": true, \"translated\": false, \"validations\": { \"length\": { \"maximum\": 1024 } } } ] you can define an action for the Item name field (which is inside the category) like this. Note that schemaFor's value is the same as the name field's value in your main schema. FieldAction<File>( schemaName: \"name\", schemaFor: \"category_id\", actionTypes: ActionTypes.image, actionDone: ActionDone.getInput, onDone: (File file) async { } )","title":"Actions and icons"},{"location":"selection/","text":"Basic usage Suppose you have following schema, then you can define the choices by using choices field. Label represents the display label, and value represents the actual value will be returned when user select any of the choice. { \"label\": \"unit\", \"readonly\": false, \"extra\": { \"choices\": [ { \"label\": \"US Dollar\", \"value\": \"USD\" }, { \"label\": \"Hong Kong Dollar\", \"value\": \"HDK\" }, { \"label\": \"RMB\", \"value\": \"CNY\" } ], \"default\": \"USD\" }, \"name\": \"unit\", \"widget\": \"select\", \"required\": false, \"translated\": false, \"validations\": {} }","title":"Selection Field"},{"location":"selection/#basic-usage","text":"Suppose you have following schema, then you can define the choices by using choices field. Label represents the display label, and value represents the actual value will be returned when user select any of the choice. { \"label\": \"unit\", \"readonly\": false, \"extra\": { \"choices\": [ { \"label\": \"US Dollar\", \"value\": \"USD\" }, { \"label\": \"Hong Kong Dollar\", \"value\": \"HDK\" }, { \"label\": \"RMB\", \"value\": \"CNY\" } ], \"default\": \"USD\" }, \"name\": \"unit\", \"widget\": \"select\", \"required\": false, \"translated\": false, \"validations\": {} }","title":"Basic usage"}]}